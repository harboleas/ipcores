$date
    Sat Mar 16 00:08:44 2013
$end
$version
    MyHDL 0.7
$end
$timescale
    1ns
$end

$scope module test $end
$var reg 8 ! addr $end
$var reg 1 " clk $end
$var reg 8 # data_i $end
$var reg 8 $ data_o $end
$var reg 1 % rd $end
$var reg 1 & wr $end
$var reg 1 ' rst $end
$scope module micro $end
$var reg 8 ( ALU_resul $end
$var reg 1 ) ctrl_mux_alu_mem $end
$var reg 16 * ir $end
$var reg 3 + addr_b $end
$var reg 3 , addr_a $end
$var reg 8 - mux_alu_mem_o $end
$var reg 1 . inc_pc $end
$var reg 1 % read_o $end
$var reg 8 ! addr_o $end
$var reg 8 / mux_reg_k_o $end
$var reg 8 # data_i $end
$var reg 8 $ data_o $end
$var reg 1 0 ret $end
$var reg 11 1 pck $end
$var reg 1 2 call $end
$var reg 1 " clk_i $end
$var reg 1 ' rst_i $end
$var reg 8 3 b_o $end
$var reg 2 4 status_reg_i $end
$var reg 1 5 jmp $end
$var reg 1 6 we_reg_file $end
$var reg 1 7 ce_status_reg $end
$var reg 2 8 status_reg_q $end
$var reg 1 9 ctrl_mux_reg_k $end
$var reg 8 : a_o $end
$var reg 4 ; ALU_fun $end
$var reg 8 < a_i $end
$var reg 11 = pc_q $end
$var reg 1 & write_o $end
$var reg 8 > k $end
$scope module STATUS_REG $end
$var reg 2 8 q_o $end
$var reg 2 4 d_i $end
$var reg 1 7 ce_i $end
$var reg 1 " clk_i $end
$upscope $end
$scope module ALU $end
$var reg 2 4 status_o $end
$var reg 8 ( resul_o $end
$var reg 4 ; fun_i $end
$var reg 1 ? zero $end
$var reg 8 : op_A_i $end
$var reg 1 @ carry $end
$var reg 8 / op_B_i $end
$var reg 9 A resul_temp $end
$upscope $end
$scope module REG_FILE $end
$var reg 3 , addr_a_i $end
$var reg 1 ' rst_i $end
$var reg 8 3 b_o $end
$var reg 1 6 we_i $end
$var reg 1 " clk_i $end
$var reg 3 + addr_b_i $end
$var reg 8 : a_o $end
$var reg 8 < a_i $end
$scope module reg_7 $end
$var reg 8 B q_o $end
$var reg 8 < d_i $end
$var reg 1 C ce_i $end
$var reg 1 " clk_i $end
$var reg 1 ' rst_i $end
$upscope $end
$scope module reg_6 $end
$var reg 8 D q_o $end
$var reg 8 < d_i $end
$var reg 1 E ce_i $end
$var reg 1 " clk_i $end
$var reg 1 ' rst_i $end
$upscope $end
$scope module reg_5 $end
$var reg 8 F q_o $end
$var reg 8 < d_i $end
$var reg 1 G ce_i $end
$var reg 1 " clk_i $end
$var reg 1 ' rst_i $end
$upscope $end
$scope module reg_4 $end
$var reg 8 H q_o $end
$var reg 8 < d_i $end
$var reg 1 I ce_i $end
$var reg 1 " clk_i $end
$var reg 1 ' rst_i $end
$upscope $end
$scope module reg_3 $end
$var reg 8 J q_o $end
$var reg 8 < d_i $end
$var reg 1 K ce_i $end
$var reg 1 " clk_i $end
$var reg 1 ' rst_i $end
$upscope $end
$scope module reg_2 $end
$var reg 8 L q_o $end
$var reg 8 < d_i $end
$var reg 1 M ce_i $end
$var reg 1 " clk_i $end
$var reg 1 ' rst_i $end
$upscope $end
$scope module reg_1 $end
$var reg 8 N q_o $end
$var reg 8 < d_i $end
$var reg 1 O ce_i $end
$var reg 1 " clk_i $end
$var reg 1 ' rst_i $end
$upscope $end
$scope module reg_0 $end
$var reg 8 P q_o $end
$var reg 8 < d_i $end
$var reg 1 Q ce_i $end
$var reg 1 " clk_i $end
$var reg 1 ' rst_i $end
$upscope $end
$upscope $end
$scope module PROG_COUNTER $end
$var reg 1 5 jmp_i $end
$var reg 1 2 call_i $end
$var reg 1 0 ret_i $end
$var reg 1 ' rst_i $end
$var reg 11 R pc_q $end
$var reg 11 S mux_out $end
$var reg 1 T j_c_r $end
$var reg 1 . inc_pc_i $end
$var reg 11 U stack_in $end
$var reg 1 " clk_i $end
$var reg 11 1 pck_i $end
$var reg 11 = pc_o $end
$var reg 11 V stack_out $end
$scope module stack $end
$var reg 1 0 pop_i $end
$var reg 11 V q_o $end
$var reg 4 W w_addr $end
$var reg 1 X rst_cont $end
$var reg 1 2 push_i $end
$var reg 11 U d_i $end
$var reg 1 " clk_i $end
$var reg 4 Y r_addr $end
$upscope $end
$scope module contador $end
$var reg 1 ' rst_i $end
$var reg 11 R q_o $end
$var reg 11 Z cuenta_aux $end
$var reg 11 S d_i $end
$var reg 1 " clk_i $end
$var reg 1 T load_i $end
$var reg 1 . ce_i $end
$upscope $end
$upscope $end
$scope module INST_DECO $end
$var reg 16 * ir_i $end
$var reg 1 0 ret_o $end
$var reg 1 9 ctrl_mux_reg_k_o $end
$var reg 1 2 call_o $end
$var reg 1 5 jmp_o $end
$var reg 3 , addr_a_o $end
$var reg 2 8 status_reg_i $end
$var reg 1 . inc_pc_o $end
$var reg 1 7 ce_status_reg_o $end
$var reg 1 % rd_mem_o $end
$var reg 1 ) ctrl_mux_alu_mem_o $end
$var reg 3 + addr_b_o $end
$var reg 11 1 pck_o $end
$var reg 5 [ opcode $end
$var reg 4 ; alu_fun_o $end
$var reg 8 > k_o $end
$var reg 1 & wr_mem_o $end
$var reg 1 6 we_reg_file_o $end
$upscope $end
$upscope $end
$upscope $end

$enddefinitions $end
$dumpvars
b00000000 !
0"
b00000000 #
b00000000 $
0%
0&
0'
b00000000 (
0)
b0000000000000000 *
b000 +
b000 ,
b00000000 -
0.
b00000000 /
00
b00000000000 1
02
b00000000 3
b00 4
05
06
07
b00 8
09
b00000000 :
sOPA ;
b00000000 <
b00000000000 =
b00000000 >
0?
0@
b000000000 A
b00000000 B
0C
b00000000 D
0E
b00000000 F
0G
b00000000 H
0I
b00000000 J
0K
b00000000 L
0M
b00000000 N
0O
b00000000 P
0Q
b00000000000 R
b00000000000 S
0T
b00000000000 U
b00000000000 V
b0001 W
0X
b0000 Y
b00000000000 Z
b00000 [
$end
1?
b00000000001 U
b0101000000000001 *
19
sADD ;
16
17
1.
1Q
b01010 [
b00000001 >
b00000000001 1
b01 4
b00000000001 S
b00000001 /
sOPB ;
b000000001 A
b00000001 !
b00000001 (
0?
b00 4
b00000001 $
b00000001 <
#10
1"
b00000001 P
b00000000001 Z
b00000000001 R
b00000001 3
b00000001 :
b00000000001 =
b00000000010 U
b0101000100000001 *
b001 ,
b00100000001 1
b00100000001 S
b00000000 :
0Q
1O
#20
0"
#30
1"
b00000000010 Z
b00000001 N
b00000001 :
b00000000010 R
b00000000011 U
b00000000010 =
b0000100000100000 *
b00001 [
b000 ,
b001 +
b00100000 >
b00000100000 1
b00000100000 S
b00100000 /
1Q
0O
09
sADD ;
b000100001 A
b00000001 /
b00100000 !
b00000001 !
b000000010 A
b00100001 (
b00100001 $
b00100001 <
b00000010 (
b00000010 <
b00000010 $
#40
0"
#50
1"
b00000010 P
b00000000011 Z
b00000000011 R
b00000010 :
b000000011 A
b00000000011 =
b00000000100 U
b0101101000000000 *
b00000011 (
b00000011 $
b00000011 <
b01011 [
b010 ,
b000 +
b00000000 >
b01000000000 1
b01000000000 S
b00000010 3
b00000000 :
0Q
1M
sOPB ;
b000000001 A
b00000010 /
b000000010 A
b00000010 !
b00000001 (
b00000001 $
b00000001 <
b00000010 (
b00000010 <
b00000010 $
#60
0"
#70
1"
b00000000100 Z
b00000010 L
b00000010 :
b00000000100 R
b00000000101 U
b00000000100 =
b0101100000100000 *
b000 ,
b001 +
b00100000 >
b00000100000 1
b00000100000 S
b00000001 3
1Q
0M
b00000001 /
b000000001 A
b00000001 !
b00000001 (
b00000001 $
b00000001 <
#80
0"
#90
1"
b00000001 P
b00000000101 Z
b00000000101 R
b00000001 :
b00000000101 =
b00000000110 U
b0101100101000000 *
b001 ,
b010 +
b01000000 >
b00101000000 1
b00101000000 S
b00000010 3
0Q
1O
b00000010 /
b000000010 A
b00000010 !
b00000010 (
b00000010 $
b00000010 <
#100
0"
#110
1"
b00000000110 Z
b00000010 N
b00000010 :
b00000000110 R
b00000000111 U
b00000000110 =
b0100000000000010 *
b01000 [
b000 ,
b000 +
b00000010 >
b00000000010 1
b00000000010 S
b00000001 3
b00000001 :
1Q
0O
15
0.
sOPA ;
06
07
0Q
b000000001 A
1T
b00000001 /
b00000001 !
b00000001 (
b00000001 $
b00000001 <
#120
0"
#130
1"
b00000000010 Z
b00000000010 R
b00000000010 =
b00000000011 U
b0000100000100000 *
b00001 [
b001 +
b00100000 >
b00000100000 1
b00000100000 S
b00000010 3
sADD ;
16
17
1.
05
0T
1Q
b000000010 A
b00000010 /
b000000011 A
b00000010 !
b00000010 (
b00000010 $
b00000010 <
b00000011 (
b00000011 <
b00000011 $
#140
0"
#150
1"
b00000000011 Z
b00000011 P
b00000011 :
b00000000011 R
b00000000100 U
b00000000011 =
b000000101 A
b00000101 (
b0101101000000000 *
b01011 [
b010 ,
b000 +
b00000000 >
b01000000000 1
b00000101 $
b00000101 <
b01000000000 S
b00000011 3
b00000010 :
0Q
1M
sOPB ;
b000000010 A
b00000011 /
b000000011 A
b00000011 !
b00000010 (
b00000010 $
b00000010 <
b00000011 (
b00000011 <
b00000011 $
#160
0"
#170
1"
b00000011 L
b00000000100 Z
b00000000100 R
b00000011 :
b00000000100 =
b00000000101 U
b0101100000100000 *
b000 ,
b001 +
b00100000 >
b00000100000 1
b00000100000 S
b00000010 3
1Q
0M
b00000010 /
b000000010 A
b00000010 !
b00000010 (
b00000010 $
b00000010 <
#180
0"
#190
1"
b00000000101 Z
b00000010 P
b00000010 :
b00000000101 R
b00000000110 U
b00000000101 =
b0101100101000000 *
b001 ,
b010 +
b01000000 >
b00101000000 1
b00101000000 S
b00000011 3
0Q
1O
b00000011 /
b000000011 A
b00000011 !
b00000011 (
b00000011 $
b00000011 <
#200
0"
#210
1"
b00000011 N
b00000000110 Z
b00000000110 R
b00000011 :
b00000000110 =
b00000000111 U
b0100000000000010 *
b01000 [
b000 ,
b000 +
b00000010 >
b00000000010 1
b00000000010 S
b00000010 3
b00000010 :
1Q
0O
15
0.
sOPA ;
06
07
0Q
b000000010 A
1T
b00000010 /
b00000010 !
b00000010 (
b00000010 $
b00000010 <
#220
0"
#230
1"
b00000000010 Z
b00000000010 R
b00000000011 U
b00000000010 =
b0000100000100000 *
b00001 [
b001 +
b00100000 >
b00000100000 1
b00000100000 S
b00000011 3
sADD ;
16
17
1.
05
0T
1Q
b000000100 A
b00000011 /
b000000101 A
b00000011 !
b00000100 (
b00000100 $
b00000100 <
b00000101 (
b00000101 <
b00000101 $
#240
0"
#250
1"
b00000101 P
b00000000011 Z
b00000000011 R
b00000101 :
b000001000 A
b00000000011 =
b00000000100 U
b0101101000000000 *
b00001000 (
b00001000 $
b00001000 <
b01011 [
b010 ,
b000 +
b00000000 >
b01000000000 1
b01000000000 S
b00000101 3
b00000011 :
0Q
1M
sOPB ;
b000000011 A
b00000101 /
b000000101 A
b00000101 !
b00000011 (
b00000011 $
b00000011 <
b00000101 (
b00000101 <
b00000101 $
#260
0"
#270
1"
b00000000100 Z
b00000101 L
b00000101 :
b00000000100 R
b00000000101 U
b00000000100 =
b0101100000100000 *
b000 ,
b001 +
b00100000 >
b00000100000 1
b00000100000 S
b00000011 3
1Q
0M
b00000011 /
b000000011 A
b00000011 !
b00000011 (
b00000011 $
b00000011 <
#280
0"
#290
1"
b00000011 P
b00000000101 Z
b00000000101 R
b00000011 :
b00000000101 =
b00000000110 U
b0101100101000000 *
b001 ,
b010 +
b01000000 >
b00101000000 1
b00101000000 S
b00000101 3
0Q
1O
b00000101 /
b000000101 A
b00000101 !
b00000101 (
b00000101 $
b00000101 <
#300
0"
#310
1"
b00000000110 Z
b00000101 N
b00000101 :
b00000000110 R
b00000000111 U
b00000000110 =
b0100000000000010 *
b01000 [
b000 ,
b000 +
b00000010 >
b00000000010 1
b00000000010 S
b00000011 3
b00000011 :
1Q
0O
15
0.
sOPA ;
06
07
0Q
b000000011 A
1T
b00000011 /
b00000011 !
b00000011 (
b00000011 $
b00000011 <
#320
0"
#330
1"
b00000000010 Z
b00000000010 R
b00000000010 =
b00000000011 U
b0000100000100000 *
b00001 [
b001 +
b00100000 >
b00000100000 1
b00000100000 S
b00000101 3
sADD ;
16
17
1.
05
0T
1Q
b000000110 A
b00000101 /
b000001000 A
b00000101 !
b00000110 (
b00000110 $
b00000110 <
b00001000 (
b00001000 <
b00001000 $
#340
0"
#350
1"
b00000000011 Z
b00001000 P
b00001000 :
b00000000011 R
b00000000100 U
b00000000011 =
b000001101 A
b00001101 (
b0101101000000000 *
b01011 [
b010 ,
b000 +
b00000000 >
b01000000000 1
b00001101 $
b00001101 <
b01000000000 S
b00001000 3
b00000101 :
0Q
1M
sOPB ;
b000000101 A
b00001000 /
b000001000 A
b00001000 !
b00000101 (
b00000101 $
b00000101 <
b00001000 (
b00001000 <
b00001000 $
#360
0"
#370
1"
b00001000 L
b00000000100 Z
b00000000100 R
b00001000 :
b00000000100 =
b00000000101 U
b0101100000100000 *
b000 ,
b001 +
b00100000 >
b00000100000 1
b00000100000 S
b00000101 3
1Q
0M
b00000101 /
b000000101 A
b00000101 !
b00000101 (
b00000101 $
b00000101 <
#380
0"
#390
1"
b00000000101 Z
b00000101 P
b00000101 :
b00000000101 R
b00000000110 U
b00000000101 =
b0101100101000000 *
b001 ,
b010 +
b01000000 >
b00101000000 1
b00101000000 S
b00001000 3
0Q
1O
b00001000 /
b000001000 A
b00001000 !
b00001000 (
b00001000 $
b00001000 <
#400
0"
#410
1"
b00001000 N
b00000000110 Z
b00000000110 R
b00001000 :
b00000000110 =
b00000000111 U
b0100000000000010 *
b01000 [
b000 ,
b000 +
b00000010 >
b00000000010 1
b00000000010 S
b00000101 3
b00000101 :
1Q
0O
15
0.
sOPA ;
06
07
0Q
b000000101 A
1T
b00000101 /
b00000101 !
b00000101 (
b00000101 $
b00000101 <
#420
0"
#430
1"
b00000000010 Z
b00000000010 R
b00000000011 U
b00000000010 =
b0000100000100000 *
b00001 [
b001 +
b00100000 >
b00000100000 1
b00000100000 S
b00001000 3
sADD ;
16
17
1.
05
0T
1Q
b000001010 A
b00001000 /
b000001101 A
b00001000 !
b00001010 (
b00001010 $
b00001010 <
b00001101 (
b00001101 <
b00001101 $
#440
0"
#450
1"
b00001101 P
b00000000011 Z
b00000000011 R
b00001101 :
b000010101 A
b00000000011 =
b00000000100 U
b0101101000000000 *
b00010101 (
b00010101 $
b00010101 <
b01011 [
b010 ,
b000 +
b00000000 >
b01000000000 1
b01000000000 S
b00001101 3
b00001000 :
0Q
1M
sOPB ;
b000001000 A
b00001101 /
b000001101 A
b00001101 !
b00001000 (
b00001000 $
b00001000 <
b00001101 (
b00001101 <
b00001101 $
#460
0"
#470
1"
b00000000100 Z
b00001101 L
b00001101 :
b00000000100 R
b00000000101 U
b00000000100 =
b0101100000100000 *
b000 ,
b001 +
b00100000 >
b00000100000 1
b00000100000 S
b00001000 3
1Q
0M
b00001000 /
b000001000 A
b00001000 !
b00001000 (
b00001000 $
b00001000 <
#480
0"
#490
1"
b00001000 P
b00000000101 Z
b00000000101 R
b00001000 :
b00000000101 =
b00000000110 U
b0101100101000000 *
b001 ,
b010 +
b01000000 >
b00101000000 1
b00101000000 S
b00001101 3
0Q
1O
b00001101 /
b000001101 A
b00001101 !
b00001101 (
b00001101 $
b00001101 <
#500
0"
#510
1"
b00000000110 Z
b00001101 N
b00001101 :
b00000000110 R
b00000000111 U
b00000000110 =
b0100000000000010 *
b01000 [
b000 ,
b000 +
b00000010 >
b00000000010 1
b00000000010 S
b00001000 3
b00001000 :
1Q
0O
15
0.
sOPA ;
06
07
0Q
b000001000 A
1T
b00001000 /
b00001000 !
b00001000 (
b00001000 $
b00001000 <
#520
0"
#530
1"
b00000000010 Z
b00000000010 R
b00000000010 =
b00000000011 U
b0000100000100000 *
b00001 [
b001 +
b00100000 >
b00000100000 1
b00000100000 S
b00001101 3
sADD ;
16
17
1.
05
0T
1Q
b000010000 A
b00001101 /
b000010101 A
b00001101 !
b00010000 (
b00010000 $
b00010000 <
b00010101 (
b00010101 <
b00010101 $
#540
0"
#550
1"
b00000000011 Z
b00010101 P
b00010101 :
b00000000011 R
b00000000100 U
b00000000011 =
b000100010 A
b00100010 (
b0101101000000000 *
b01011 [
b010 ,
b000 +
b00000000 >
b01000000000 1
b00100010 $
b00100010 <
b01000000000 S
b00010101 3
b00001101 :
0Q
1M
sOPB ;
b000001101 A
b00010101 /
b000010101 A
b00010101 !
b00001101 (
b00001101 $
b00001101 <
b00010101 (
b00010101 <
b00010101 $
#560
0"
#570
1"
b00010101 L
b00000000100 Z
b00000000100 R
b00010101 :
b00000000100 =
b00000000101 U
b0101100000100000 *
b000 ,
b001 +
b00100000 >
b00000100000 1
b00000100000 S
b00001101 3
1Q
0M
b00001101 /
b000001101 A
b00001101 !
b00001101 (
b00001101 $
b00001101 <
#580
0"
#590
1"
b00000000101 Z
b00001101 P
b00001101 :
b00000000101 R
b00000000110 U
b00000000101 =
b0101100101000000 *
b001 ,
b010 +
b01000000 >
b00101000000 1
b00101000000 S
b00010101 3
0Q
1O
b00010101 /
b000010101 A
b00010101 !
b00010101 (
b00010101 $
b00010101 <
#600
0"
#610
1"
b00010101 N
b00000000110 Z
b00000000110 R
b00010101 :
b00000000110 =
b00000000111 U
b0100000000000010 *
b01000 [
b000 ,
b000 +
b00000010 >
b00000000010 1
b00000000010 S
b00001101 3
b00001101 :
1Q
0O
15
0.
sOPA ;
06
07
0Q
b000001101 A
1T
b00001101 /
b00001101 !
b00001101 (
b00001101 $
b00001101 <
#620
0"
#630
1"
b00000000010 Z
b00000000010 R
b00000000011 U
b00000000010 =
b0000100000100000 *
b00001 [
b001 +
b00100000 >
b00000100000 1
b00000100000 S
b00010101 3
sADD ;
16
17
1.
05
0T
1Q
b000011010 A
b00010101 /
b000100010 A
b00010101 !
b00011010 (
b00011010 $
b00011010 <
b00100010 (
b00100010 <
b00100010 $
#640
0"
#650
1"
b00100010 P
b00000000011 Z
b00000000011 R
b00100010 :
b000110111 A
b00000000011 =
b00000000100 U
b0101101000000000 *
b00110111 (
b00110111 $
b00110111 <
b01011 [
b010 ,
b000 +
b00000000 >
b01000000000 1
b01000000000 S
b00100010 3
b00010101 :
0Q
1M
sOPB ;
b000010101 A
b00100010 /
b000100010 A
b00100010 !
b00010101 (
b00010101 $
b00010101 <
b00100010 (
b00100010 <
b00100010 $
#660
0"
#670
1"
b00000000100 Z
b00100010 L
b00100010 :
b00000000100 R
b00000000101 U
b00000000100 =
b0101100000100000 *
b000 ,
b001 +
b00100000 >
b00000100000 1
b00000100000 S
b00010101 3
1Q
0M
b00010101 /
b000010101 A
b00010101 !
b00010101 (
b00010101 $
b00010101 <
#680
0"
#690
1"
b00010101 P
b00000000101 Z
b00000000101 R
b00010101 :
b00000000101 =
b00000000110 U
b0101100101000000 *
b001 ,
b010 +
b01000000 >
b00101000000 1
b00101000000 S
b00100010 3
0Q
1O
b00100010 /
b000100010 A
b00100010 !
b00100010 (
b00100010 $
b00100010 <
#700
0"
#710
1"
b00000000110 Z
b00100010 N
b00100010 :
b00000000110 R
b00000000111 U
b00000000110 =
b0100000000000010 *
b01000 [
b000 ,
b000 +
b00000010 >
b00000000010 1
b00000000010 S
b00010101 3
b00010101 :
1Q
0O
15
0.
sOPA ;
06
07
0Q
b000010101 A
1T
b00010101 /
b00010101 !
b00010101 (
b00010101 $
b00010101 <
#720
0"
#730
1"
b00000000010 Z
b00000000010 R
b00000000010 =
b00000000011 U
b0000100000100000 *
b00001 [
b001 +
b00100000 >
b00000100000 1
b00000100000 S
b00100010 3
sADD ;
16
17
1.
05
0T
1Q
b000101010 A
b00100010 /
b000110111 A
b00100010 !
b00101010 (
b00101010 $
b00101010 <
b00110111 (
b00110111 <
b00110111 $
#740
0"
#750
1"
b00000000011 Z
b00110111 P
b00110111 :
b00000000011 R
b00000000100 U
b00000000011 =
b001011001 A
b01011001 (
b0101101000000000 *
b01011 [
b010 ,
b000 +
b00000000 >
b01000000000 1
b01011001 $
b01011001 <
b01000000000 S
b00110111 3
b00100010 :
0Q
1M
sOPB ;
b000100010 A
b00110111 /
b000110111 A
b00110111 !
b00100010 (
b00100010 $
b00100010 <
b00110111 (
b00110111 <
b00110111 $
#760
0"
#770
1"
b00110111 L
b00000000100 Z
b00000000100 R
b00110111 :
b00000000100 =
b00000000101 U
b0101100000100000 *
b000 ,
b001 +
b00100000 >
b00000100000 1
b00000100000 S
b00100010 3
1Q
0M
b00100010 /
b000100010 A
b00100010 !
b00100010 (
b00100010 $
b00100010 <
#780
0"
#790
1"
b00000000101 Z
b00100010 P
b00100010 :
b00000000101 R
b00000000110 U
b00000000101 =
b0101100101000000 *
b001 ,
b010 +
b01000000 >
b00101000000 1
b00101000000 S
b00110111 3
0Q
1O
b00110111 /
b000110111 A
b00110111 !
b00110111 (
b00110111 $
b00110111 <
#800
0"
#810
1"
b00110111 N
b00000000110 Z
b00000000110 R
b00110111 :
b00000000110 =
b00000000111 U
b0100000000000010 *
b01000 [
b000 ,
b000 +
b00000010 >
b00000000010 1
b00000000010 S
b00100010 3
b00100010 :
1Q
0O
15
0.
sOPA ;
06
07
0Q
b000100010 A
1T
b00100010 /
b00100010 !
b00100010 (
b00100010 $
b00100010 <
#820
0"
#830
1"
b00000000010 Z
b00000000010 R
b00000000011 U
b00000000010 =
b0000100000100000 *
b00001 [
b001 +
b00100000 >
b00000100000 1
b00000100000 S
b00110111 3
sADD ;
16
17
1.
05
0T
1Q
b001000100 A
b00110111 /
b001011001 A
b00110111 !
b01000100 (
b01000100 $
b01000100 <
b01011001 (
b01011001 <
b01011001 $
#840
0"
#850
1"
b01011001 P
b00000000011 Z
b00000000011 R
b01011001 :
b010010000 A
b00000000011 =
b00000000100 U
b0101101000000000 *
b10010000 (
b10010000 $
b10010000 <
b01011 [
b010 ,
b000 +
b00000000 >
b01000000000 1
b01000000000 S
b01011001 3
b00110111 :
0Q
1M
sOPB ;
b000110111 A
b01011001 /
b001011001 A
b01011001 !
b00110111 (
b00110111 $
b00110111 <
b01011001 (
b01011001 <
b01011001 $
#860
0"
#870
1"
b00000000100 Z
b01011001 L
b01011001 :
b00000000100 R
b00000000101 U
b00000000100 =
b0101100000100000 *
b000 ,
b001 +
b00100000 >
b00000100000 1
b00000100000 S
b00110111 3
1Q
0M
b00110111 /
b000110111 A
b00110111 !
b00110111 (
b00110111 $
b00110111 <
#880
0"
#890
1"
b00110111 P
b00000000101 Z
b00000000101 R
b00110111 :
b00000000101 =
b00000000110 U
b0101100101000000 *
b001 ,
b010 +
b01000000 >
b00101000000 1
b00101000000 S
b01011001 3
0Q
1O
b01011001 /
b001011001 A
b01011001 !
b01011001 (
b01011001 $
b01011001 <
#900
0"
#910
1"
b00000000110 Z
b01011001 N
b01011001 :
b00000000110 R
b00000000111 U
b00000000110 =
b0100000000000010 *
b01000 [
b000 ,
b000 +
b00000010 >
b00000000010 1
b00000000010 S
b00110111 3
b00110111 :
1Q
0O
15
0.
sOPA ;
06
07
0Q
b000110111 A
1T
b00110111 /
b00110111 !
b00110111 (
b00110111 $
b00110111 <
#920
0"
#930
1"
b00000000010 Z
b00000000010 R
b00000000010 =
b00000000011 U
b0000100000100000 *
b00001 [
b001 +
b00100000 >
b00000100000 1
b00000100000 S
b01011001 3
sADD ;
16
17
1.
05
0T
1Q
b001101110 A
b01011001 /
b010010000 A
b01011001 !
b01101110 (
b01101110 $
b01101110 <
b10010000 (
b10010000 <
b10010000 $
#940
0"
#950
1"
b00000000011 Z
b10010000 P
b10010000 :
b00000000011 R
b00000000100 U
b00000000011 =
b011101001 A
b11101001 (
b0101101000000000 *
b01011 [
b010 ,
b000 +
b00000000 >
b01000000000 1
b11101001 $
b11101001 <
b01000000000 S
b10010000 3
b01011001 :
0Q
1M
sOPB ;
b001011001 A
b10010000 /
b010010000 A
b10010000 !
b01011001 (
b01011001 $
b01011001 <
b10010000 (
b10010000 <
b10010000 $
#960
0"
#970
1"
b10010000 L
b00000000100 Z
b00000000100 R
b10010000 :
b00000000100 =
b00000000101 U
b0101100000100000 *
b000 ,
b001 +
b00100000 >
b00000100000 1
b00000100000 S
b01011001 3
1Q
0M
b01011001 /
b001011001 A
b01011001 !
b01011001 (
b01011001 $
b01011001 <
#980
0"
#990
1"
b00000000101 Z
b01011001 P
b01011001 :
b00000000101 R
b00000000110 U
b00000000101 =
b0101100101000000 *
b001 ,
b010 +
b01000000 >
b00101000000 1
b00101000000 S
b10010000 3
0Q
1O
b10010000 /
b010010000 A
b10010000 !
b10010000 (
b10010000 $
b10010000 <
#1000
0"
